{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","onAddComment","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","newCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","match","useRouteMatch","console","log","path","exact","to","url","NoQuotesFound"],"mappings":"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","file":"static/js/3.8eca03c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef,useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const {onAddComment} = props\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  useEffect(()=>{\n    if(status==='completed' && !error){\n      onAddComment()\n    }\n  },[status,error,onAddComment])\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    sendRequest({commentData:{ text: enteredText },quoteId:props.quoteId});\n    // optional: Could validate here\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n  } = useHttp(getAllComments, true);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const newCommentHandler = useCallback(() => {\n    sendRequest(quoteId)\n  },[sendRequest,quoteId])\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if(status==='completed'&&(loadedComments&&loadedComments.length>0)){\n    comments =  <CommentsList comments={loadedComments}/>\n  }\n  if(status==='completed'&&(!loadedComments||loadedComments.length===0)){\n    comments = <p className='centered'>No Comments were added yet</p>\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          onAddComment={newCommentHandler}\n          quoteId={quoteId}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment } from 'react';\nimport classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <Fragment>\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n    </Fragment>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\nconst QuoteDetail = () => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote,true);\n  const match = useRouteMatch();\n  const params = useParams();\n  const {quoteId} = params;\n  console.log(match);\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest,quoteId]);\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n  if (status === \"completed\" && !loadedQuote.text) {\n    return <NoQuotesFound />;\n  }\n  //   const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\n  else\n    return (\n      <Fragment>\n        <HighlightedQuote author={loadedQuote.author} text={loadedQuote.text} />\n        <Route path={match.path} exact>\n          <div className=\"centered\">\n            <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n              Load Comments\n            </Link>\n          </div>\n        </Route>\n\n        <Route path={`${match.path}/comments`}>\n          <Comments />\n        </Route>\n      </Fragment>\n    );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}